package com.mutistic.behavioral.nullobject;

import com.mutistic.utils.PrintUtil;

/**
 * @program 空对象模式[Null Object Pattern]
 * @description 
 * @author mutisitic
 * @date 2018年9月12日
 */
public class NullObjectPattern {
	public static void main(String[] args) {
		PrintUtil.ln("空对象模式[Null Object Pattern]");
		PrintUtil.ln("一、定义、本质、原则:\r\n" + 
			"\r\n" + 
			"定义: 提供一个对象作为缺少给定类型对象的代理。该空对象提供智能\"什么也不做\"行为，隐藏其合作者的细节。\r\n" + 
			"本质: 统一行为，默认实现\r\n" + 
			"原则: \r\n" + 
			"\r\n" + 
			"二、结构和说明:\r\n" + 
			"\r\n" + 
			"Client：空对象模式客户端，使用协作者完成具体的功能\r\n" + 
			"\r\n" + 
			"AbstractObject：声明协作者的接口，根据需要，为所有类共有的接口实现默认行为\r\n" + 
			"\r\n" + 
			"RealObject：定义AbstractObject的具体子类，其实例提供客户期望的有用行为\r\n" + 
			"\r\n" + 
			"NullObject：提供与AbstractObject相同的接口，以便可以用空对象替换真实对象，实现其界面，什么也不处理。\r\n" + 
			"究竟什么也不处理取决于客户期望的行为，当有多种方法什么也不做的行为，可能需要多个NullObject类\r\n" + 
			"ObjectFactory：对象工厂，负责根据条件创建AbstractObject对象的具体实例：RealObject 或 NullObject\r\n" + 
			"\r\n" + 
			"三、理解:\r\n" + 
			"\r\n" + 
			"主要解决：使用对象的时候，客户端没有针对对象做Null检查，导致空指针异常（java.lang.NullPointerException）\r\n" + 
			"如何解决：声明一个NullObject类，当实际对象为Null时，返回NullObject对象\r\n" + 
			"\r\n" + 
			"1、空对象模式目的：\r\n" + 
			"  有时需要协作者的类不需要协作者做任何事情。但是，该类希望对一个协作者的处理方式与处理实际提供行为的协作者一样。\r\n" + 
			"\r\n" + 
			"2、空对象模式功能：\r\n" + 
			"  定义由真实对象和空对象组成的类层次结构。当期望对象什么也不做时，可以使用空对象代替真实对象。\r\n" + 
			"每当客户端代码需要一个真实对象时，它也可以使用一个空对象。\r\n" + 
			"\r\n" + 
			"  使客户端代码简单。客户可以统一处理真正的协作者和空合作者。客户通常不知道（也不应该关心）他们是在处理真实合作者还是空合作者。\r\n" + 
			"这简化了客户端代码，因为它避免了编写特别处理null协作者的测试代码。\r\n" + 
			"\r\n" + 
			"  将无执行代码封装到null对象中。什么也不处理的代码很容易找到。它与AbstractObject和RealObject类的变化很明显。\r\n" + 
			"它可以有效地编码。它不需要包含空值的变量，因为这些值可以硬编码为常量，或者无任何代码可以完全避免使用这些值。\r\n" + 
			"\r\n" + 
			"  使null对象中的任何代码都易于重用。所有需要协作者什么也不处理的多个客户端都将以同样的方式做任何事情。\r\n" + 
			"如果不需要修改任何行为，则可以在一个地方更改代码。此后，所有客户端将继续使用相同的什么也不处理行为，这是现在修改后什么也不处理的行为。\r\n" + 
			"\r\n" + 
			"  使什么也不处理行为难以分配或混合到几个协作对象的真实行为中。同样不做任何行为都不能轻易地添加到几个类中，\r\n" + 
			"除非这些类都将行为委托给可以是null对象类的类。\r\n" + 
			"\r\n" + 
			"  可能需要为每个新的AbstractObject类创建一个新的NullObject类。\r\n" + 
			"\r\n" + 
			"  如果各种客户端不同意null对象应该什么也不处理，就像没有很好地定义AbstractObject接口那样，可能很难实现。\r\n" + 
			"\r\n" + 
			"  总是充当什么也不处理的对象。Null对象不会转换为Real对象。\r\n" + 
			"\r\n" + 
			"四、写法:\r\n" + 
			"\r\n" + 
			"1、单例模式：\r\n" + 
			"  Null Object类通常实现为Singleton。由于null对象通常没有任何状态，因此其状态不能更改，因此多个实例是相同的。\r\n" + 
			"系统可以重复使用单个实例，而不是使用多个相同的实例。\r\n" + 
			"\r\n" + 
			"2、客户不同意null行为：\r\n" + 
			"  如果某些客户端期望null对象不以任何方式执行任何操作，则需要多个NullObject类。如果必须在运行时自定义不执行任何行为，\r\n" + 
			"则NullObject类将需要可插入变量，以便客户端可以指定null对象不应该执行任何操作。\r\n" + 
			"这通常可能是AbstractObject没有明确定义（语义）界面的症状。\r\n" + 
			"\r\n" + 
			"3、转换为真实对象：\r\n" + 
			"  Null对象不会转换为真实对象。如果对象可能决定停止提供不执行任何操作并开始提供实际行为，则它不是空对象。\r\n" + 
			"它可以是具有无效模式的真实对象，例如可以进入和退出只读模式的控制器。如果它是一个必须从无操作对象变为实际对象的单个对象，\r\n" + 
			"则应使用状态模式实现。在这种情况下，可以使用空状态，或者代理可以保持空对象。\r\n" + 
			"\r\n" + 
			"4、空对象不是代理：\r\n" + 
			"  null对象的使用可以类似于代理Proxy的使用，但这两种模式具有不同的目的。\r\n" + 
			"\r\n" + 
			"  4.1、代理在访问真实目的时提供间接级别，从而控制对主题的访问。\r\n" + 
			"  4.2、null协作者不会隐藏真实对象并控制对它的访问，它会替换真实对象。\r\n" + 
			"  4.3、代理可能最终变异以开始像真实主体一样行事。\r\n" + 
			"  4.4、null对象不会变异以开始提供真实行为，它将始终提供不执行任何行为。\r\n" + 
			"\r\n" + 
			"5、空对象作为特殊策略：\r\n" + 
			"  空对象可以是策略模式的特例。策略将几个ConcreteStrategy类指定为完成任务的不同方法。\r\n" + 
			"如果其中一种方法始终如一，那么ConcreteStrategy就是一个NullObject。\r\n" + 
			"例如，Controller是用于处理输入的View的策略，NoController是忽略所有输入的策略。\r\n" + 
			"\r\n" + 
			"6、空对象作为特殊状态：\r\n" + 
			"  空对象可以是状态模式的特例。通常，每个ConcreteState都有一些不做任何方法，因为它们不适合该状态。\r\n" + 
			"实际上，给定的方法通常被实现为在大多数状态下做一些有用的事情，但至少在一个状态中什么都不做。\r\n" + 
			"如果特定的ConcreteState实现其大多数方法不执行任何操作或至少给出null结果，则它将变为无效状态，因此是空状态。\r\n" + 
			"\r\n" + 
			"6、空对象作为访客对象:\r\n" + 
			"  Null对象可用于允许访问者安全地访问层次结构并处理空状况。\r\n" + 
			"\r\n" + 
			"6、Null Object类不是内部类：\r\n" + 
			"  Null Object是一个具体的协作者类，充当需要一个客户的协作者。\r\n" + 
			"  null行为不是设计用于混合(mixin)到需要执行任何操作的对象中。\r\n" + 
			"  它是为一个类而设计的，该类向协作者委派可能会或可能不会执行任何行为的所有行为。\r\n" + 
			"\r\n" + 
			"五、优点:\r\n" + 
			"\r\n" + 
			"1、简化客户端对null验证的检查\r\n" + 
			"2、一定程度上避免了空指针异常（java.lang.NullPointerException）\r\n" + 
			"3、统一了对象的操作行为，并且对null验证提供了默认功能\r\n" + 
			"\r\n" + 
			"六、缺点:\r\n" + 
			"\r\n" + 
			"1、NullObject可能会增加类的数目\r\n" + 
			"2、并不是所有的对象都需要NullObject，NullObject可能会引起不必要的错误\r\n" + 
			"\r\n" + 
			"七、使用场景:\r\n" + 
			"\r\n" + 
			"1、一个对象需要一个协作者。Null对象模式不会引入此协作，它使用已存在的协作。\r\n" + 
			"2、一些协作者实例应该什么也不处理。\r\n" + 
			"3、想要从客户端抽象出null的处理。\r\n" + 
			"\r\n" + 
			"八、注意事项:\r\n" + 
			"\r\n" + 
			"应该针对具体对象使用空对象模式，而不是针对所有的类使用空对象模式\r\n" + 
			"");
	}
}
