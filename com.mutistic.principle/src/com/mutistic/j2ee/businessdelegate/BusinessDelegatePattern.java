package com.mutistic.j2ee.businessdelegate;

import com.mutistic.utils.PrintUtil;

/**
 * @program 业务代表模式[Business Delegate Pattern]
 * @description 
 * @author mutisitic
 * @date 2018年9月13日
 */
public class BusinessDelegatePattern {
	public static void main(String[] args) {
		PrintUtil.ln("业务代表模式[Business Delegate Pattern]");
		PrintUtil.ln("一、定义、本质:\r\n" + 
				"\r\n" + 
				"定义: 对表示层和业务层的解耦。它基本上是用来减少通信或对表示层代码中的业务层代码的远程查询功能\r\n" + 
				"本质: 解耦表示层和业务层，减少通信\r\n" + 
				"\r\n" + 
				"二、结构和说明:\r\n" + 
				"\r\n" + 
				"Clinet：客户端，表示层代码可以是 JSP、Servlet 或 UI java 代码\r\n" + 
				"\r\n" + 
				"BusinessDelegate：具体业务代表，一个为客户端实体提供的入口类，它提供了对业务服务方法的访问\r\n" + 
				"\r\n" + 
				"BusinessService：业务服务接口，提供了业务实现逻辑的统一接口\r\n" + 
				"\r\n" + 
				"ConcreteService：具体的业务服务，业务实现逻辑的具体实现\r\n" + 
				"\r\n" + 
				"LookUpService：查询服务，查找服务对象负责获取相关的业务服务实现，并提供业务对象对业务代表对象的访问\r\n" + 
				"\r\n" + 
				"三、理解:\r\n" + 
				"\r\n" + 
				"1、业务代表模式：\r\n" + 
				"  在J2EE系统中，一般划分为表现层和业务逻辑层，为实现表现层和业务逻辑层之间的最大限度解耦，引入业务代表模式，\r\n" + 
				"这样，当表现层或业务逻辑层具体实现技术发生时，对彼此的影响很小，当然，如果希望实现完全解耦，我们可以使用消息系统JMS来实现\r\n" + 
				"\r\n" + 
				"2、业务代表模式实现目标：\r\n" + 
				"  业务层所有服务完全展示给客户端。客户端可以完全介入调用。\r\n" + 
				"  动态扩展性强，可为整个业务逻辑层动态扩展新的功能。　　\r\n" + 
				"  客户端调用业务层的实现代码必须简洁，至少是可配置的，最大限度降低代码的耦合性\r\n" + 
				"\r\n" + 
				"四、写法:\r\n" + 
				"\r\n" + 
				"1、结合工厂模式：\r\n" + 
				"　　一般使用工厂模式涉及到静态类或单态模式，可以使用静态或单例模式实现，从而形成客户端单一访问业务逻辑层入口，\r\n" + 
				"    1.1、这工厂模式带来的优点： \r\n" + 
				"    由于业务逻辑入口是单一的，客户端对业务逻辑访问的可控性强，例如可动态单一入口加入权限检查或其它全局统一功能。\r\n" + 
				"Jave中权限正是这样实现。可控性强。\r\n" + 
				"    客户端代码简洁，作为客户端的表现层技术，如果更换了实现技术，修改的代码很少\r\n" + 
				"\r\n" + 
				"　　1.2、工厂模式带来的主要缺点是：\r\n" + 
				"　　当ServiceFactory实现子类很多时，试图使用一个总入口来包含这些Service会造成过多代码耦合在一个类中，\r\n" + 
				"造成Facade模式滥用的后果。也就是说，使用工厂模式，扩展性不是很强。\r\n" + 
				"　　由于使用静态或单例模式，在性能上，容易走入单线程、单并发用户的误区，违背了J2EE多线程并发使用的原则\r\n" + 
				"\r\n" + 
				"2、结合组合模式：\r\n" + 
				"　　Command模式可以说解决了工厂模式的缺点，Command模式将所有的服务都展示给客户端，\r\n" + 
				"客户端可以通过特定命令形式直接指定调用后台众多Service中任何一种，Petstore中Web对EJB调用就是使用了Command模式实现。\r\n" + 
				"\r\n" + 
				"　　Command模式虽然突破了工厂模式单一入口的缺点，但是带来的缺点是易用性不够，Command模式代码实现起来不方便。\r\n" + 
				"\r\n" + 
				"　　Command模式主要问题是可控性不强，如果要为所有Service动态增加类似Filter等这样通用功能，如权限检查等是非常不方便的。\r\n" + 
				"");
	}
}
