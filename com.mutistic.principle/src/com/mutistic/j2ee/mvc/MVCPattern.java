package com.mutistic.j2ee.mvc;

import com.mutistic.utils.PrintUtil;

/**
 * @program MVC 模式[MVC Pattern]
 * @description 
 * @author mutisitic
 * @date 2018年9月13日
 */
public class MVCPattern {
	public static void main(String[] args) {
		PrintUtil.ln("MVC 模式[MVC Pattern]");
		PrintUtil.ln("一、定义、本质:\r\n" + 
				"\r\n" + 
				"定义: M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式\r\n" + 
				"本质: 分离实现\r\n" + 
				"\r\n" + 
				"二、结构和说明:\r\n" + 
				"\r\n" + 
				"Model：模型，是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据\r\n" + 
				" \r\n" + 
				"View：视图，是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的\r\n" + 
				"\r\n" + 
				"Controller：控制器，是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据\r\n" + 
				"\r\n" + 
				"三、理解:\r\n" + 
				"\r\n" + 
				"1、MVC设计模式：\r\n" + 
				"  MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，\r\n" + 
				"用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，\r\n" + 
				"在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。\r\n" + 
				"  MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。\r\n" + 
				"\r\n" + 
				"2、理解MVC设计模式：\r\n" + 
				"  MVC 分层有助于管理复杂的应用程序，可以在一个时间内专门关注一个方面。\r\n" + 
				"例如，可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。\r\n" + 
				"  MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑\r\n" + 
				"\r\n" + 
				"3、MVC框架是什么：\r\n" + 
				"  MVC框架：它强制性的使应用程序输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。\r\n" + 
				"它们各自处理自己的任务。要使用MVC框架，则一定要遵守该框架的规则，它有它的强制性所在。\r\n" + 
				"它所使用的三个核心部件其实都是来自MVC设计模式。只不过在框架中让他们彼此更加独立了去处理各自的任务而已。\r\n" + 
				"\r\n" + 
				"3.4、理解架构、框架、设计模式： 软件重用\r\n" + 
				"\r\n" + 
				"1、架构、框架、设计模式概念：\r\n" + 
				"  1.1、架构：简单的说架构就是一个蓝图，是一种设计方案，将客户的不同需求抽象成为抽象组件，\r\n" + 
				"并且能够描述这些抽象组件之间的通信和调用。\r\n" + 
				"  1.2、框架：软件框架是项目软件开发过程中提取特定领域软件的共性部分形成的体系结构，\r\n" + 
				"不同领域的软件项目有着不同的框架类型。框架不是现成可用的应用系统。\r\n" + 
				"而是一个半成品，提供了诸多服务，开发人员进行二次开发，实现具体功能的应用系统。\r\n" + 
				"  1.3、设计模式：是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结，它强调的是一个设计问题的解决方法\r\n" + 
				"\r\n" + 
				"2、框架与架构关系：\r\n" + 
				"  2.1首先说框架不是架构，应该说框架比架构更具体，更偏重于技术，而架构偏重于设计。还有一个关系就是架构可以通过多种框架来实现\r\n" + 
				"\r\n" + 
				"3、框架与设计模式关系：\r\n" + 
				"  3.1、设计模式研究的是针对单一问题的设计思路和解决方法，一个模式可应用于不同的框架和被不同的语言所实现；\r\n" + 
				"  3.2、框架则是一个应用的体系结构，是一种或多种设计模式和代码的混合体虽然它们有所不同，但却共同致力于使人们的设计可以被重用，\r\n" + 
				"在思想上存在着统一性的特点，因而设计模式的思想可以在框架设计中进行应用。\r\n" + 
				"\r\n" + 
				"4、架构与设计模式关系：\r\n" + 
				"  4.1、两者的关系也是很好区分的，设计模式主要是针对单一问题的解决方法，范畴比较小，\r\n" + 
				"  4.2架构是高层次的针对体系结构的一种设计思路，范畴比较大\r\n" + 
				"  可以这么说，一个架构中可能会出现多个设计模式来解决多种架构中的问题。\r\n" + 
				"\r\n" + 
				"5、总结：\r\n" + 
				"  三者之间的区别还是有很多，首先架构应该是一个范畴最大的概念，是最高层次的设计。\r\n" + 
				"一个架构设计中可能会用到多个框架和多个设计模式；\r\n" + 
				"而框架是针对共性抽象出来的半成品，这里面可能包含着多个设计模式；\r\n" + 
				"而设计模式就是解决单一问题的设计思路和解决方法。\r\n" + 
				"\r\n" + 
				"  在做一个项目的时候首先出来的应该是架构，是对整个问题的一个总体上的设计，\r\n" + 
				"之后再会考虑运用什么样的框架和设计模式来实现我们的架构；\r\n" + 
				"当然，只使用框架和设计模式中的一种也是经常遇到的。\r\n" + 
				"\r\n" + 
				"  三者的共同点都是解决现实生活中的问题而出现的，而且三者中都会表现出来的就是“高内聚，低耦合”的理念；\r\n" + 
				"所以他们的共同点就是让我们的设计更面向对象化。\r\n" + 
				"\r\n" + 
				"四、写法:\r\n" + 
				"\r\n" + 
				"1、MVC 工作模型原理：\r\n" + 
				"  MVC 模式将所面对的系统分为 3 个部分，分别是数据模型、视图和控制器，并定义了这 3 个部分之间实现通信的一种模式，\r\n" + 
				"使每个部分不必卷入到其他部分的状态表示和方法实现的细节中去。\r\n" + 
				"每个部分有自己的数据管理规则，各个部分对象之间的通信只能使用已定义的一个受限连接集合进行。\r\n" + 
				"保持这种分离性通常是好的面向对象编程和设计要追求的目标，让各个对象只需专注于自己的事务。\r\n" + 
				"  Model 本质上封装了数据及行为 ,其中包含对数据控制及修改的规则，提供了一套查询、改变 Model 状态的方法。\r\n" + 
				"  View 是 Model 所表示出来的图形界面，它主要用于提交 Model 的信息展示给用户。\r\n" + 
				"  Controller 是 Model 和 View 之间的协调者，它的主要作用有以下几点 :\r\n" + 
				"	1、定义用户界面对用户输入的响应方式。\r\n" + 
				"	2、解释用户的输入，并命令 Model 进行相应的操作创造相应模型。\r\n" + 
				"	3、负责将模型信息传递给 View，必要时还要负责创建新的 View 和 Controller\r\n" + 
				"\r\n" + 
				"五、优点:\r\n" + 
				"\r\n" + 
				"1、可以为一个模型在运行时同时建立和使用多个视图。变化-传播机制可以确保所有相关的视图及时得到模型数据变化，\r\n" + 
				"从而使所有关联的视图和控制器做到行为同步。 \r\n" + 
				"\r\n" + 
				"2、视图与控制器的可接插性，允许更换视图和控制器对象，而且可以根据需求动态的打开或关闭、甚至在运行期间进行对象替换。 \r\n" + 
				"\r\n" + 
				"3、模型的可移植性。因为模型是独立于视图的，所以可以把一个模型独立地移植到新的平台工作。需要做的只是在新平台上对视图和控制器进行新的修改。 \r\n" + 
				"\r\n" + 
				"4、潜在的框架结构。可以基于此模型建立应用程序框架，不仅仅是用在设计界面的设计中\r\n" + 
				"\r\n" + 
				"5、分离数据和其表示：使得添加或者删除一个用户视图变得很容易，甚至可以在程序执行过程中动态地进行用户视图的更新。\r\n" + 
				"模型和视图能够单独开发，即业务逻辑和用户表现的分离，增加了程序的可维护性，可扩展性、并使测试变得更为容易\r\n" + 
				"\r\n" + 
				"6、将控制逻辑和表现界面分离：允许程序能够在运行时根据工作流、用户习惯或者模型状态来动态选择不同的用户界面。\r\n" + 
				"现在一个应用程序需要用越来越多的方式访问，MVC 设计模式支持多个视图能共享一个模型，\r\n" + 
				"因此在MVC 设计模式中应用开发人员可以最大化的重用他的代码，大大提高了软件开发的效率和质量\r\n" + 
				"\r\n" + 
				"六、缺点:\r\n" + 
				"\r\n" + 
				"1、增加了系统结构和实现的复杂性。对于简单的界面，严格遵循MVC，使模型、视图与控制器分离，会增加结构的复杂性，\r\n" + 
				"并可能产生过多的更新操作，降低运行效率。 \r\n" + 
				"\r\n" + 
				"2、视图与控制器间的过于紧密的连接。视图与控制器是相互分离，但确实联系紧密的部件，视图没有控制器的存在，其应用是很有限的，\r\n" + 
				"反之亦然，这样就妨碍了他们的独立重用。 \r\n" + 
				"\r\n" + 
				"3、视图对模型数据的低效率访问。依据模型操作接口的不同，视图可能需要多次调用才能获得足够的显示数据。\r\n" + 
				"对未变化数据的不必要的频繁访问，也将损害操作性能。 \r\n" + 
				"\r\n" + 
				"4、目前，一般高级的界面工具或构造器不支持模式。改造这些工具以适应MVC需要和建立分离的部件的代价是很高的，从而造成MVC使用的困难。\r\n" + 
				"\r\n" + 
				"七、使用场景:\r\n" + 
				"\r\n" + 
				"1、需要分离数据和其表示时，可以使用MVC设计模式\r\n" + 
				"2、需要将控制逻辑和表现界面分离时，可以使用MVC设计模式\r\n" + 
				"\r\n" + 
				"具体场景：\r\n" + 
				"最典型的MVC就是JSP + Servlet + Javabean的模式\r\n" + 
				"\r\n" + 
				"八、注意事项:\r\n" + 
				"\r\n" + 
				"MVC设计模式是MVC框架的一种抽象，MVC框架是MVC设计模式的一种具体实现\r\n" + 
				"");
	}
}
